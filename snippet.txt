{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Print to console": {
		"scope": "cpp",
		"prefix": "cclass",
		"body": [
			"#include \"./${TM_FILENAME_BASE}.hpp\"",
			"",
			"${TM_FILENAME_BASE}::${TM_FILENAME_BASE}()",
			"/*:define attributes(value)*/",
			"{",
			"\tstd::cout << \"${TM_FILENAME_BASE} \" << \"has been constructed\" << std::endl;",
			"}\n",

			"${TM_FILENAME_BASE}::~${TM_FILENAME_BASE}()",
			"{",
			"\tstd::cout << \"${TM_FILENAME_BASE} \" << \"has been destructed\" << std::endl;",
			"}\n",

			"${TM_FILENAME_BASE}::${TM_FILENAME_BASE}(const ${TM_FILENAME_BASE}& ${TM_FILENAME_BASE/(.*)/${1:/downcase}/}Copy)",
			"/*:define attributes(value)*/",
			"{",
			"\tstd::cout << \"${TM_FILENAME_BASE} \" << \"has been copied\" << std::endl;",
			"}\n",


			"${TM_FILENAME_BASE}& ${TM_FILENAME_BASE}::operator=(const ${TM_FILENAME_BASE}& ${TM_FILENAME_BASE/(.*)/${1:/downcase}/}B)",
			"{",
			"\tif (this != &${TM_FILENAME_BASE/(.*)/${1:/downcase}/}B)",
			"\t{",
			"\t\t/*define copied attributes here*/",
			"\t}",
			"}\n",
		],
		"description": "create c++98 class in Orthodox Canonical Form"
	},

	"Orthodox Canonical Class Creation": {
		"scope": "cpp",
		"prefix": "hclass",
		"body": [
			"#ifndef ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_HPP",
			"#define ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_HPP",
			"\n#include <iostream>",
			"",
			"class ${TM_FILENAME_BASE} \n{",
			"public:",
			"\t${TM_FILENAME_BASE}();",
			"\t~${TM_FILENAME_BASE}();",
			"\t${TM_FILENAME_BASE}(const ${TM_FILENAME_BASE}& ${TM_FILENAME_BASE/(.*)/${1:/downcase}/}Copy);",
			"\t${TM_FILENAME_BASE}& operator=(const ${TM_FILENAME_BASE}& ${TM_FILENAME_BASE/(.*)/${1:/downcase}/}B);",
			"",
			"private:",
			"\t// Add your attributes here",
			"};",
			"",
			"#endif"
		],
		"description": "description"
	}
}

